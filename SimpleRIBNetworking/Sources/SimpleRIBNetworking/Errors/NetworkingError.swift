//
//  NetworkingError.swift
//  
//
//  Created by Prabin Kumar Datta on 31/08/21.
//

import Foundation
import Alamofire

/// App normalized API generic error states
public enum NetworkingError: Error {
    
    /// Error generated when internet is not available upon performing the API call
    /// Error is generated as a result of performing the API call by catching the error thrown from URLSession's data task
    /// `URLError status code of type .notConnectedToInternet` is matched to pick the error enum
    ///
    /// Usage:
    /// - Application behavior - Error specific creative | screen/popup/toast
    /// - Normalized category - `ErrorCategory.noInternet`
    case noInternet
    
    /// Error generated if the Session error type matched with `URLError` type.
    ///
    /// This error is usually an error associated with host not being responsive, dns errors, domain not reachable, or server trust errors.
    ///
    /// All categories related to this can be found at doc path `URLError.Code`
    ///
    /// - Parameters:
    ///   - info: System generated deep-dive info Dictionary of information leading to error
    ///
    /// Usage:
    /// - Application behavior - Server error | screen/popup/toast
    /// - Normalized category - `ErrorCategory.server`
    case urlError(info: [String: Any])
    
    /// Error generated upon server recognizing as cache content of client identified with `ETag` header value is unchanged.
    ///
    /// Validated against `HTTP StatusCode 304`
    ///
    /// Usage:
    /// - Application behavior - Ignored | NONE
    /// - Normalized category - `ErrorCategory.ignore`
    case notModified
    
    /// Error generated for an unrecognized error received.
    ///
    /// Parameters:
    ///  - statusCode: Int type - HTTP Status code received
    ///  - message: General message if Data received was nil, else .utf8 conversion of Data received
    ///
    /// Usage:
    /// - Application behavior - Server Error | screen/popup/toast
    /// - Normalized category - `ErrorCategory.server`
    case unknownResponse(statusCode: Int, message: String)
    
    /// Error generated upon exception caught at server/backend.
    ///
    /// All HTTP Status Codes other than `Range<200...299>, 304, 401 and 503`
    ///
    /// - Parameters:
    ///  - statusCode: Int type, HTTP Status code received
    ///  - message: General message if Data received was nil, else .utf8 conversion of Data received
    ///
    /// Retry Criteria:
    ///  - Retryable: TRUE, APIs are auto retried for max 2 times
    ///
    /// Usage:
    /// - Application behavior - Server Error | screen/popup/toast
    /// - Normalized category - `ErrorCategory.server`
    case serverError(statusCode:Int, message: String) // 402...502 & 504
    
    /// Error generated when server/backend application is in maintenance mode.
    ///
    /// Validated against `HTTP StatusCode 503`
    ///
    /// Retry Criteria:
    /// - Retryable: FALSE, APIs are not auto retried for this error as error is not recoverable.
    ///
    /// Usage:
    /// - Application behavior - Server Maintenance Specific Error | screen/popup/toast
    /// - Normalized category - `ErrorCategory.server`
    case serverMaintenance
    
    /// Error generated when non of the above error case criteria were matched.
    ///
    /// - Parameters:
    ///   - message: `String` type, General message if Data received was nil, else .utf8 conversion of Data received
    ///
    /// - Usage:
    ///   - Application behavior: Server Maintenance Specific Error | screen/popup/toast
    ///   - Normalized category: `ErrorCategory.server`
    case unknown(message: String)
    
    /// Initializer
    ///
    /// - Parameters:
    ///   - httpResponse: HTTPURLResponse, optional
    ///   - error: Error, optional
    ///   - data: Data, optional
    public init(httpResponse: HTTPURLResponse? = nil, error: Error? = nil, data: Data? = nil) {
        self.init(statusCode: httpResponse?.statusCode, error: error, data: data)
    }
        
    /// Initializer
    /// - Parameters:
    ///   - statusCode: Int, HTTP Status Code, optional
    ///   - error: Error, optional
    ///   - data: Data, optional
    public init(statusCode: Int?, error: Error? = nil, data: Data? = nil) {
        
        /// Function to generate URLError type
        /// - Parameter urlError: URLError
        /// - Returns: Dictionary of info generated by URLSession describing error root cause
        func processURLError(_ urlError: URLError) -> NetworkingError {
            if urlError.code == .notConnectedToInternet {
                return .noInternet
            }
            return .urlError(info: urlError.userInfo)
        }
        
        /// Function to generate error type specifically from HTTP Status code
        /// - Parameters:
        ///   - statusCode: Int, HTTP Status code
        ///   - data: Data, optional, received from Request Session
        /// - Returns: `NetworkingError` type
        func errorFromStatusCode(_ statusCode: Int, data: Data?) -> NetworkingError {
                       
            var defaultMessage = "App logically ignored response (leads to an experience equivalent to server error)"
            if let data = data, let dataValue = String(data: data, encoding: .utf8) {
                defaultMessage = dataValue
            }
            
//            var dataModel: ErrorDataModel?
//            if let data = data {
//                let decoder = JSONDecoder()
//                decoder.keyDecodingStrategy = .convertFromSnakeCase
//                dataModel = try? decoder.decode(ErrorDataModel.self, from: data)
//            }
            
            if statusCode == 304 { // Content Not Modified
                return .notModified
            } else if 400...502 ~= statusCode || statusCode == 504  { // Server Error
                return .serverError(statusCode: statusCode, message: defaultMessage)
            } else if statusCode == 503 { // Server Maintenance
                return .serverMaintenance
            }
                        
            return .unknownResponse(statusCode: statusCode, message: defaultMessage)
        }
        
        if let statusCode = statusCode {
            self = errorFromStatusCode(statusCode, data: data)
        }
        
        else if let afError = error as? AFError, let urlError = afError.underlyingError as? URLError {
            self = processURLError(urlError)
        }
        
        else if let urlError = error as? URLError {
            self = processURLError(urlError)
        }
        
        else {
            var message = "Unknown Error (leads to an experience equivalent to server error)"
            if let error = error {
                message = error.localizedDescription
            }
            self = .unknown(message: message)
        }
    }
}

extension NetworkingError: LocalizedError {
    
    /// Log-able translation of error type
    /// Usually used to log to developers console or analytics error events
    public var errorDescription: String? {
        switch self {
        case .noInternet:
            return "Internet not available"
        case .urlError(let data):
            return "URL Error with info: \(data)"
        case .notModified:
            return "Content not modified"
        case .unknownResponse(let statusCode, let message):
            return "Unknown response, for \(statusCode),  message: \(message)"
        case .serverError(let statusCode, let message):
            return "Server Error, statusCode: \(statusCode), message: \(message)"
        case .serverMaintenance:
            return "Server Maintenance Error, code: 503"
        case .unknown(let message):
            return "Unknown Error, message: \(message)"
        }
    }
}

extension NetworkingError: Equatable {
    
    public static func == (lhs: NetworkingError, rhs: NetworkingError) -> Bool {
        lhs.localizedDescription == rhs.localizedDescription
    }
}
